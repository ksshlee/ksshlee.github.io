I"b<h2 id="git-이란">Git 이란?</h2>

<ul>
  <li>소스코드를 효율적으로 관리하기 위한 도구</li>
  <li>개발자가 프로젝트의 버전 관리를 용이하게 해주는 도구</li>
</ul>

<p><img src="/assets/img/programmingskill/2020_01_16/git1.png" alt="git" /></p>

<ul>
  <li>간략하게 이런식으로 정리할 수 있다.</li>
  <li>Git 설치는 건너뛰겠다.</li>
</ul>

<p><br /><br /></p>

<h2 id="git-저장소-생성">Git 저장소 생성</h2>

<h3 id="기존-디렉토리---git-저장소">기존 디렉토리 -&gt; Git 저장소</h3>

<ul>
  <li>
    <p>그림에서 Working directory 즉 작업공간을 생성해보자</p>
  </li>
  <li>
    <p>원하는 디렉토리를 들어간다.</p>
  </li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git init
</code></pre></div></div>

<ul>
  <li>해당 명령어를 입력하면 해당 디렉토리는 깃의 작업 공간이 된다.</li>
</ul>

<p><img src="/assets/img/programmingskill/2020_01_16/git2.png" alt="git2" /></p>

<h3 id="기존-git-저장소---기존-디렉토리">기존 Git 저장소 -&gt; 기존 디렉토리</h3>

<blockquote>
  <p>일반적인 Clone</p>
  <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git clone &lt;url&gt;
</code></pre></div>  </div>
  <blockquote>
    <p>Example</p>
  </blockquote>
</blockquote>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git clone https://github.com/ksshlee/git_study.git
</code></pre></div></div>
<ul>
  <li>remote 레파지토리에 git_study 라는 레파지토리를 복제해오는 명령어이다.</li>
  <li>그러면 디렉토리에 git_study라는 폴더가 생성이되고 그 폴더는 작업 공간이 된다.</li>
</ul>

<blockquote>
  <p>변경된 이름으로 Clone</p>
</blockquote>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git clone &lt;url&gt; name
</code></pre></div></div>

<blockquote>
  <blockquote>
    <p>Example</p>
  </blockquote>
</blockquote>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git clone https://github.com/ksshlee/git_study.git git
</code></pre></div></div>

<ul>
  <li>디렉토리 이름이 git이라는것 빼고 앞선 명령어와 똑같은 결과가 나온다.</li>
</ul>

<p><br /><br /></p>

<h2 id="git-기본-명령어">Git 기본 명령어</h2>
<h3 id="git-status">git status</h3>

<ul>
  <li>현재 작업 공간에서 git과 파일들의 상태를 알려주는 명령어다.</li>
</ul>

<blockquote>
  <p><em>Untracked files</em></p>
</blockquote>

<ul>
  <li>git에 등록되지 않은 파일들</li>
  <li>Untracked file들은 staging을 하기전까지 계속 Untracked file</li>
  <li>수정이 되도 Untracked file 이다.</li>
  <li>즉 최초로 생성됬거나, stage에서 취소된 파일들</li>
  <li>git add 명령어로 staging 가능</li>
</ul>

<blockquote>
  <p><em>Changes to be comitted</em></p>
</blockquote>

<ul>
  <li>Staging이 완료된 파일들</li>
  <li>Local repository에 등록이 준비된 파일들</li>
  <li>git commit -m 으로 커밋 가능</li>
  <li>new file
    <ul>
      <li>새로운 파일</li>
    </ul>
  </li>
  <li>modified
    <ul>
      <li>변경된 파일</li>
    </ul>
  </li>
</ul>

<blockquote>
  <p><em>Changes not staged for commit</em></p>
</blockquote>

<ul>
  <li>commit 전에 바뀐 파일들</li>
  <li>modified는 변경된 파일들
    <ul>
      <li>git add 명령어로 다시 staging 해줘야한다.</li>
    </ul>
  </li>
  <li>deleted는 삭제된 파일들
    <ul>
      <li>git rm으로 stage 상태에서 내려줘야한다.</li>
    </ul>
  </li>
</ul>

<p><img src="/assets/img/programmingskill/2020_01_16/git3.png" alt="git3" /></p>
<ul>
  <li>간단하게 요약하면 이런 그림이 나온다.</li>
</ul>

<hr />

<h3 id="git-add">git add</h3>

<ul>
  <li>작업 공간에서 작업이 끝난 파일을 commit하기전 stage에 올린다.</li>
  <li>이 작업을 스테이징이라고 말한다.</li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git add &lt;filename&gt;
</code></pre></div></div>

<blockquote>
  <p>Example</p>
</blockquote>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git add Readme.md
</code></pre></div></div>

<hr />

<h3 id="git-rm">git rm</h3>

<ul>
  <li>Stage 상태에서 unstage 상태로 내리는 작업이다.</li>
  <li>Stage에 올린후 파일을 삭제했을 경우에도 사용된다.</li>
</ul>

<blockquote>
  <p>Example</p>
</blockquote>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git rm --cached filename
</code></pre></div></div>

<ul>
  <li>위의 명령어는 파일은 untracked 상태로 돌리기위한 명령어이다.</li>
  <li>파일은 삭제되지 않는다.</li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git rm -f filename
</code></pre></div></div>

<ul>
  <li>위의 명령어는 파일을 삭제하면서 untracked 상태로 돌리는 명령어다.</li>
  <li>파일은 삭제된다.</li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git rm filename
</code></pre></div></div>

<ul>
  <li>위 명령어는 stage된 상태에서 파일이 삭제되었을때 사용하는 명령어이다.</li>
  <li>파일은 이미 삭제되어진 상태이다.</li>
</ul>
<hr />

<h3 id="git-commit">git commit</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git commit -m "commit message"
</code></pre></div></div>

<ul>
  <li>stage된 파일들을 local repository에 올리는 작업이다.</li>
  <li>stage된 파일들이 없으면 commit이 안된다.</li>
  <li>커밋 메시지는 개발자들간의 약속인 약간의 형태가 있다.</li>
</ul>

<blockquote>
  <p>Staging 건너뛰기</p>
</blockquote>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git commit -a -m "commit message"
</code></pre></div></div>

<ul>
  <li>staging을 건너뛴 명령어다.</li>
  <li>-a 명령어는 모든 파일들을 staging 시키는 명령어다.</li>
  <li>각각의 파일이 아닌 모든 파일을 staging할때 유용한 명령어다.</li>
</ul>

<hr />

<h3 id="git-mv">git mv</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git mv file_from file_to
</code></pre></div></div>

<ul>
  <li>파일의 이름을 변경하고 싶을때 사용하는 명령어다.</li>
</ul>

<blockquote>
  <p>Example</p>
</blockquote>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git mv hello.txt hello
</code></pre></div></div>
<ul>
  <li>hello.txt 파일이 hello 파일로 renamed 됬다고 뜬다.</li>
</ul>

<p><br /><br /></p>

<h2 id="출처">출처</h2>
<p><a href="https://git-scm.com/">https://git-scm.com/</a></p>

<p><a href="https://icons8.com/icons/set/server">https://icons8.com/icons/set/server</a></p>

<p><strong>혹시 제가 잘못 알고 있거나 오타, 궁금한점 있으시면 댓글 남겨주시면 감사겠습니다!</strong></p>
:ET